//
//  CompanyLoginViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 7/5/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CompanyLoginDisplayLogic: class
{
  func displaySomething(viewModel: CompanyLogin.Something.ViewModel)
}



class CompanyLoginViewController: UIViewController, CompanyLoginDisplayLogic
{
    
//    MARK:- Var and declarations
  var interactor: CompanyLoginBusinessLogic?
  var router: (NSObjectProtocol & CompanyLoginRoutingLogic & CompanyLoginDataPassing)?

    
//    MARK:- IBOutlets
    @IBOutlet weak var backgroundImageView: UIImageView!
    @IBOutlet weak var codeClientTextField: UITextField!
    @IBOutlet weak var SeConnecterButton: UIButton!
    @IBOutlet var viewLogoAccretio: UIView!
    
    
//    MARK:- Button actions
    @IBAction func CompanyConnectionOnClick(_ sender: Any) {
        let storyBoard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
             let LoginUser = storyBoard.instantiateViewController(withIdentifier: "loginVC") as! LoginViewController
        self.navigationController?.pushViewController(LoginUser, animated: true)
    }
    
    
    
    // MARK: Object lifecycle
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = CompanyLoginInteractor()
    let presenter = CompanyLoginPresenter()
    let router = CompanyLoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    @IBOutlet weak var scrollView: UIScrollView!
    // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
   
    settingViews()
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    setupKeyboardDismissRecognizer()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = CompanyLogin.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: CompanyLogin.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    
    func settingViews(){
        backgroundImageView.layer.opacity = 40
        codeClientTextField.layer.cornerRadius = 5
        SeConnecterButton.layer.cornerRadius = 5
        viewLogoAccretio.layer.opacity = 20
    }
    
   @objc func keyboardWillShow(notification: NSNotification) {
       if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
           if self.view.frame.origin.y == 0 {
               self.view.frame.origin.y -= keyboardSize.height/2
           }
       }
   }
   @objc func keyboardWillHide(notification: NSNotification) {
       if self.view.frame.origin.y != 0 {
           self.view.frame.origin.y = 0
       }
   }
    func setupKeyboardDismissRecognizer(){
        let tapRecognizer: UITapGestureRecognizer = UITapGestureRecognizer(
            target: self,
            action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tapRecognizer)
    }
    @objc func dismissKeyboard(_ views: UIView)
    {
        view.endEditing(true)
    }
}
