//
//  FormationViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 4/27/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

protocol FormationDisplayLogic: class
{
    func displaySomething(viewModel: Formation.Something.ViewModel)
    func formationForValidationData(response:ResponseFormation)
    func formationMyDemandesData(response:MesFromationResponse)
    func getActionsSessionData(response : ResponseAction)
    func getCatalogueData(response:ResponseCatalogue)
}

class FormationViewController: UIViewController, FormationDisplayLogic
{
    
    
    //MARK: -IBOutlets :
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    @IBOutlet weak var MesDemandesView: UIView!
    @IBOutlet weak var tableViewMesDemandes: UITableView!
    
    
    
    //    MARK:- Var & Let
    var interactor: FormationBusinessLogic?
    var router: (NSObjectProtocol & FormationRoutingLogic & FormationDataPassing)?
    var dataValueForValidation : [FormationEntity] = []
    var dataValueMyDemandes : [DemandeFormation] = []
    
//    MARK: - Action Button functions:

    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = FormationInteractor()
        let presenter = FormationPresenter()
        let router = FormationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    @IBAction func segmentationAction(_ sender: Any) {
        if segmentedControl.selectedSegmentIndex == 0 {
            MesDemandesView.alpha = 1
            MesDemandesView.isHidden = false
        } else {
            MesDemandesView.alpha = 0
            MesDemandesView.isHidden = true
        }
    }
    
    // MARK: View configuration  :
    let cellSpacingHeight: CGFloat = 5
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.getListFormationForValidation(token: token)
        self.interactor?.showListFormationManagerMesDemandes(token: token)

        
    }

    

    
    //MARK: -Getting data from presenter :
    func doSomething()
    {
        let request = Formation.Something.Request()
        interactor?.doSomething(request: request)
    }
    func displaySomething(viewModel: Formation.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    func formationForValidationData(response:ResponseFormation){
        print(response)
        dataValueForValidation = response.content
        
    }
    
    
    func formationMyDemandesData(response:MesFromationResponse){
        dataValueMyDemandes = response.content!
        print(dataValueMyDemandes)
        print(response)
        print(dataValueMyDemandes.count)
        print("---------------------------------------------")
        for demande in dataValueMyDemandes{
            if demande.label != nil {
                print(demande)
            }else{
                print("Hello")
            }
        }
        print(dataValueMyDemandes[1])
        print("-------------------------------")
        tableViewMesDemandes.reloadData()
    }
    func getActionsSessionData(response : ResponseAction){
        //        print(response)
    }
    
    func getCatalogueData(response:ResponseCatalogue){
        //        print(response)
    }
    
    
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    
    
}

extension FormationViewController:UITableViewDelegate,UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataValueMyDemandes.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "MesDemandesCell", for: indexPath) as?
            DemandeTableViewCell
            else {
                return UITableViewCell()
        }
        var value : String? = (dataValueMyDemandes[indexPath.row].trainingOfferCode?.label)
        if  value == nil {
            value = (dataValueMyDemandes[indexPath.row].label)!
        }
        if value == nil{
            value = "Formation sans nom"
        }
        cell.formationLabel.text  = value
        let dateFormatterGet = DateFormatter()
        dateFormatterGet.dateFormat = "yyyy-mm-dd"
        let dateFormatterPrint = DateFormatter()
        dateFormatterPrint.dateFormat = "dd MMM yyyy"
        if let date = dateFormatterGet.date(from: dataValueMyDemandes[indexPath.row].creationDate!) {
            cell.dateLabel.text = dateFormatterPrint.string(from: date)
        } else {
            cell.dateLabel.text = dataValueMyDemandes[indexPath.row].creationDate

        }
        cell.initiateurLabel.text = (dataValueMyDemandes[indexPath.row].initiator?.firstName)! + " " + (dataValueMyDemandes[indexPath.row].initiator?.lastName)!
        cell.nombreParticipantsLabel.text = String(dataValueMyDemandes[indexPath.row].targetEmployees!.count)
        if dataValueMyDemandes[indexPath.row].status == "PROGRESS"{
            cell.statusView.layer.backgroundColor = UIColor.orange.cgColor
        }else{
            cell.statusView.layer.backgroundColor = UIColor.green.cgColor
        }
        return cell
    }
    
}

//
//extension UITableView {
//    func setEmptyView(title: String, message: String, messageImage: UIImage) {
//
//        let emptyView = UIView(frame: CGRect(x: self.center.x, y: self.center.y, width: self.bounds.size.width, height: self.bounds.size.height))
//
//        let messageImageView = UIImageView()
//        let titleLabel = UILabel()
//        let messageLabel = UILabel()
//
//        messageImageView.backgroundColor = .clear
//
//        titleLabel.translatesAutoresizingMaskIntoConstraints = false
//        messageImageView.translatesAutoresizingMaskIntoConstraints = false
//        messageLabel.translatesAutoresizingMaskIntoConstraints = false
//
//        titleLabel.textColor = UIColor.black
//        titleLabel.font = UIFont(name: "HelveticaNeue-Bold", size: 18)
//
//        messageLabel.textColor = UIColor.lightGray
//        messageLabel.font = UIFont(name: "HelveticaNeue-Regular", size: 17)
//
//        emptyView.addSubview(titleLabel)
//        emptyView.addSubview(messageImageView)
//        emptyView.addSubview(messageLabel)
//
//        messageImageView.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
//        messageImageView.centerYAnchor.constraint(equalTo: emptyView.centerYAnchor, constant: -20).isActive = true
//        messageImageView.widthAnchor.constraint(equalToConstant: 150).isActive = true
//        messageImageView.heightAnchor.constraint(equalToConstant: 150).isActive = true
//
//        titleLabel.topAnchor.constraint(equalTo: messageImageView.bottomAnchor, constant: 10).isActive = true
//        titleLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
//
//        messageLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 10).isActive = true
//        messageLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
//
//        messageImageView.image = messageImage
//        titleLabel.text = title
//        messageLabel.text = message
//        messageLabel.numberOfLines = 0
//        messageLabel.textAlignment = .center
//
//        UIView.animate(withDuration: 1, animations: {
//
//            messageImageView.transform = CGAffineTransform(rotationAngle: .pi / 10)
//        }, completion: { (finish) in
//            UIView.animate(withDuration: 1, animations: {
//                messageImageView.transform = CGAffineTransform(rotationAngle: -1 * (.pi / 10))
//            }, completion: { (finishh) in
//                UIView.animate(withDuration: 1, animations: {
//                    messageImageView.transform = CGAffineTransform.identity
//                })
//            })
//
//        })
//
//        self.backgroundView = emptyView
//        self.separatorStyle = .none
//    }
//
//    func restore() {
//
//        self.backgroundView = nil
//        self.separatorStyle = .singleLine
//
//    }
//
//}
