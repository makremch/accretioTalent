//
//  FormationViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 4/27/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

protocol FormationDisplayLogic: class
{
    func displaySomething(viewModel: Formation.Something.ViewModel)
    func formationForValidationData(response:ResponseFormation)
    func formationMyDemandesData(response:ResponseFormation)
    func getActionsSessionData(response : ResponseAction)
    func getCatalogueData(response:ResponseCatalogue)
}

class FormationViewController: UIViewController, FormationDisplayLogic,UITableViewDataSource,UITableViewDelegate
{
    
    //MARK: -IBOutlets :
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var choiceSeg: UISegmentedControl!
    
//    MARK:- Var & Let
    var interactor: FormationBusinessLogic?
    var router: (NSObjectProtocol & FormationRoutingLogic & FormationDataPassing)?
    var dataValueForValidation : [FormationEntity] = []
    var dataValueMyDemandes : [FormationEntity] = []
    
//    MARK: - Action Button functions:
    @IBAction func choiceSeg(_ sender: Any) {
        let index = choiceSeg.selectedSegmentIndex
        let title = choiceSeg.titleForSegment(at: index)!
        if choiceSeg.selectedSegmentIndex == 0 {
            
            tableView.reloadData()
        } else if title == "A valider" {
            tableView.reloadData()
        }
        tableView.reloadData()
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = FormationInteractor()
        let presenter = FormationPresenter()
        let router = FormationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View configuration  :
    let cellSpacingHeight: CGFloat = 5
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        
        self.interactor?.getListFormationForValidation(token: token)
        self.interactor?.showListFormationManagerMesDemandes(token: token)
        //        self.interactor?.showMyActions(token: token)
        //        self.interactor?.showCatalogueFormation(token: token)
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorColor = UIColor.white
        
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if choiceSeg.selectedSegmentIndex == 0 {
            if dataValueMyDemandes.count == 0 {
                tableView.setEmptyView(title: "Vous n'avez pas de demandes", message: "Vos demandes seront affichés ici !", messageImage:  UIImage(named: "messageImage")!)
            }else{
                tableView.restore()
            }
            return dataValueMyDemandes.count
        }else if choiceSeg.selectedSegmentIndex == 1 {
            
            if dataValueForValidation.count == 0 {
                tableView.setEmptyView(title: "Vous n'avez pas de demandes", message: "Vos demandes seront affichés ici !", messageImage:  UIImage(named: "messageImage")!)
            }else{
                tableView.restore()
            }
        }
        return dataValueForValidation.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "MyDemandTableViewCell", for: indexPath) as? DemandeTableViewCell
            else {
                return UITableViewCell()
        }
        let index = choiceSeg.selectedSegmentIndex
        if (choiceSeg.titleForSegment(at: index))! == "Mes demandes" {
            if(dataValueMyDemandes.count == 0){
            }else{
                cell.NomFormationLabel.text = dataValueMyDemandes[indexPath.row].label ?? "Formation "
                cell.InitiateurLabel.text = dataValueMyDemandes[indexPath.row].initiator!.firstName + " " + dataValueMyDemandes[indexPath.row].initiator!.lastName
                cell.dateCreationLabel.text = String(dataValueMyDemandes[indexPath.row].creationDate!)
                cell.statusView.layer.cornerRadius = 2
                print(dataValueMyDemandes[indexPath.row].status!)
                if dataValueMyDemandes[indexPath.row].status! == "PROGRESS"{
                    cell.statusView.backgroundColor = UIColor.orange
                    cell.statusLabel.text = "En cours"
                }else{
                    cell.statusView.backgroundColor = UIColor.systemGreen
                    cell.statusLabel.text = "Validée"
                }
            }
            return cell
        }else{
            dataValueMyDemandes.removeAll()
            print("taille demandes a valider !")
            if dataValueForValidation.count == 0 {
                print("no data ! ")
            }
            cell.NomFormationLabel.text = dataValueForValidation[indexPath.row].label ?? "Formation "
            cell.InitiateurLabel.text = dataValueForValidation[indexPath.row].initiator!.firstName + " " + dataValueForValidation[indexPath.row].initiator!.lastName
            cell.dateCreationLabel.text = String(dataValueForValidation[indexPath.row].creationDate!)
            cell.statusView.layer.cornerRadius = 2
            print(dataValueForValidation[indexPath.row].status!)
            if dataValueForValidation[indexPath.row].status! == "PROGRESS"{
                cell.statusView.backgroundColor = UIColor.orange
                cell.statusLabel.text = "En cours"
            }else{
                cell.statusView.backgroundColor = UIColor.systemGreen
                cell.statusLabel.text = "Validée"
            }
            
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return cellSpacingHeight
    }
    
    
    //MARK: -Getting data from presenter :
    func doSomething()
    {
        let request = Formation.Something.Request()
        interactor?.doSomething(request: request)
    }
    func displaySomething(viewModel: Formation.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    func formationForValidationData(response:ResponseFormation){
        print(response)
        dataValueForValidation = response.content
        tableView.reloadData()
    }
    
    
    func formationMyDemandesData(response:ResponseFormation){
        dataValueMyDemandes = response.content
        tableView.reloadData()
    }
    func getActionsSessionData(response : ResponseAction){
        //        print(response)
    }
    
    func getCatalogueData(response:ResponseCatalogue){
        //        print(response)
    }
    
    
    
    
    
    
}


extension UITableView {
    func setEmptyView(title: String, message: String, messageImage: UIImage) {
        
        let emptyView = UIView(frame: CGRect(x: self.center.x, y: self.center.y, width: self.bounds.size.width, height: self.bounds.size.height))
        
        let messageImageView = UIImageView()
        let titleLabel = UILabel()
        let messageLabel = UILabel()
        
        messageImageView.backgroundColor = .clear
        
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        messageImageView.translatesAutoresizingMaskIntoConstraints = false
        messageLabel.translatesAutoresizingMaskIntoConstraints = false
        
        titleLabel.textColor = UIColor.black
        titleLabel.font = UIFont(name: "HelveticaNeue-Bold", size: 18)
        
        messageLabel.textColor = UIColor.lightGray
        messageLabel.font = UIFont(name: "HelveticaNeue-Regular", size: 17)
        
        emptyView.addSubview(titleLabel)
        emptyView.addSubview(messageImageView)
        emptyView.addSubview(messageLabel)
        
        messageImageView.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        messageImageView.centerYAnchor.constraint(equalTo: emptyView.centerYAnchor, constant: -20).isActive = true
        messageImageView.widthAnchor.constraint(equalToConstant: 150).isActive = true
        messageImageView.heightAnchor.constraint(equalToConstant: 150).isActive = true
        
        titleLabel.topAnchor.constraint(equalTo: messageImageView.bottomAnchor, constant: 10).isActive = true
        titleLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        
        messageLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 10).isActive = true
        messageLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        
        messageImageView.image = messageImage
        titleLabel.text = title
        messageLabel.text = message
        messageLabel.numberOfLines = 0
        messageLabel.textAlignment = .center
        
        UIView.animate(withDuration: 1, animations: {
            
            messageImageView.transform = CGAffineTransform(rotationAngle: .pi / 10)
        }, completion: { (finish) in
            UIView.animate(withDuration: 1, animations: {
                messageImageView.transform = CGAffineTransform(rotationAngle: -1 * (.pi / 10))
            }, completion: { (finishh) in
                UIView.animate(withDuration: 1, animations: {
                    messageImageView.transform = CGAffineTransform.identity
                })
            })
            
        })
        
        self.backgroundView = emptyView
        self.separatorStyle = .none
    }
    
    func restore() {
        
        self.backgroundView = nil
        self.separatorStyle = .singleLine
        
    }
    
}
