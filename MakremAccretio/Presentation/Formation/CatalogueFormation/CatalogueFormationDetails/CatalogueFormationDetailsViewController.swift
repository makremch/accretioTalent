//
//  CatalogueFormationDetailsViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 5/17/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogueFormationDetailsDisplayLogic: class
{
    func displaySomething(viewModel: CatalogueFormationDetails.Something.ViewModel)
    func getCatalogueDataDetails(response: FormationCatalogueDetails)
}

class CatalogueFormationDetailsViewController: UIViewController, CatalogueFormationDetailsDisplayLogic
    
{
    
   
    var interactor: CatalogueFormationDetailsBusinessLogic?
    var router: (NSObjectProtocol & CatalogueFormationDetailsRoutingLogic & CatalogueFormationDetailsDataPassing)?
    
    
    //    MARK: var declarations
    var content : FormationCatalogue? = nil
    var code : String = ""
    
    //    MARK: - Declaration UI:
    @IBOutlet weak var formateurView: UIView!
    @IBOutlet weak var objectifView: UIView!
    @IBOutlet weak var programmeView: UIView!
    @IBOutlet weak var segChoiceRubrique: UISegmentedControl!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var formationTitleLabel: UILabel!
    @IBOutlet weak var responsableNameLabel: UILabel!
    @IBOutlet weak var certificationLabel: UILabel!
    @IBOutlet weak var interExternLabel: UILabel!
    @IBOutlet weak var locationLabel: UILabel!
    @IBOutlet weak var initiatorNameLastname: UILabel!
    @IBOutlet weak var effectifNumber: UILabel!
    @IBOutlet weak var sessionDuration: UILabel!
    
    
    @IBAction func sgmentationControllerChangingView(_ sender: Any) {
        if segChoiceRubrique.selectedSegmentIndex == 0 {
            objectifView.alpha = 1
            programmeView.alpha = 0
            formateurView.alpha = 0
        }else if segChoiceRubrique.selectedSegmentIndex == 1 {
            objectifView.alpha = 0
            programmeView.alpha = 1
            formateurView.alpha = 0
        } else{
            objectifView.alpha = 0
            programmeView.alpha = 0
            formateurView.alpha = 1
        }
    }
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CatalogueFormationDetailsInteractor()
        let presenter = CatalogueFormationDetailsPresenter()
        let router = CatalogueFormationDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
  var formation : FormationCatalogueDetails?
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        designImage ()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.gettingFormationCatalogueById(token: token, code: self.code)
        let url = URL(string: "https://accretio-2-tnr.advyteam.com/documentsmanagement/api/document-mgm?moduleName=training&codeFile=" + (content!.picture)!)
        imageView.kf.setImage(with: url){
                    result in
                    switch result {
                    case .success:
                        print(result)
                        self.imageView.contentMode = UIView.ContentMode.scaleToFill
                        self.imageView.clipsToBounds = true
                        break
                    case .failure:
                        self.imageView.image = UIImage(named: "noImageAvailable")!
                        self.imageView.contentMode = UIView.ContentMode.scaleAspectFit
                    }
                }
        imageView.layer.cornerRadius = 15
        formationTitleLabel.text = content?.label
        if content?.duration == nil{
            sessionDuration.text = "undefined"
        }else{
            sessionDuration.text = String((content?.duration)!)
        }
        initiatorNameLastname.text = (content?.initiator?.firstName)! + " " + (content?.initiator?.lastName)!
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = CatalogueFormationDetails.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CatalogueFormationDetails.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    @IBAction func demanderOnClick(_ sender: Any) {
    }
    
    @IBOutlet weak var demanderButton: UIButton!
    
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    
    
    func designImage (){
        imageView.layer.cornerRadius = 10
        demanderButton.layer.cornerRadius = 8
    }
    
    
    
    
    
    
    //    MARK: - Getting data for formation by ID
    func getCatalogueDataDetails(response: FormationCatalogueDetails){
        print("3assssba")
        print(response.capacity)
        print("3assssba")
        formation = response
        locationLabel.text = formation?.place
        certificationLabel.text = "certification: " + String((formation?.certification)!)
        
    }
    
    
    
    
    
    
    
}
