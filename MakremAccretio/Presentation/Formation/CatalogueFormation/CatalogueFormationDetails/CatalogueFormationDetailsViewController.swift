//
//  CatalogueFormationDetailsViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 5/17/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit


protocol CatalogueFormationDetailsDisplayLogic: class
{
    func displaySomething(viewModel: CatalogueFormationDetails.Something.ViewModel)
    func getCatalogueDataDetails(response: FormationCatalogueDetails)
    func getSkills(response:[String: String])
}

class CatalogueFormationDetailsViewController: UIViewController, CatalogueFormationDetailsDisplayLogic

{
    
    //    MARK: var declarations
    
    weak var viewControllerObjectif: ObjectifCatalogueDisplayLogic?
    var content                    : FormationCatalogue?          = nil
    var code                       : String                       = ""
    var skillsLabel                : [String:String]              = ["":""]
    var interactor                 : CatalogueFormationDetailsBusinessLogic?
    var router                     : (NSObjectProtocol & CatalogueFormationDetailsRoutingLogic & CatalogueFormationDetailsDataPassing)?
    
    //    MARK: - Declaration UI:
    @IBOutlet weak var demanderButton            : UIButton!
    @IBOutlet weak var segChoiceRubrique         : UISegmentedControl!
    @IBOutlet weak var imageView                 : UIImageView!
    @IBOutlet weak var formationTitleLabel       : UILabel!
    @IBOutlet weak var responsableNameLabel      : UILabel!
    @IBOutlet weak var certificationLabel        : UILabel!
    @IBOutlet weak var interExternLabel          : UILabel!
    @IBOutlet weak var locationLabel             : UILabel!
    @IBOutlet weak var initiatorNameLastname     : UILabel!
    @IBOutlet weak var effectifNumber            : UILabel!
    @IBOutlet weak var sessionDuration           : UILabel!
    @IBOutlet weak var ccc                       : UILabel!
    @IBOutlet weak var webViewObjectif           : WKWebView!
    @IBOutlet weak var objectifView              : UIView!
    @IBOutlet weak var programView               : UIView!
    @IBOutlet weak var webViewProgramme          : WKWebView!
    @IBOutlet weak var formateurTableView        : UITableView!
    @IBOutlet weak var formateurView             : UIView!
    
    
    @IBAction func sgmentationControllerChangingView(_ sender: Any) {
        if segChoiceRubrique.selectedSegmentIndex == 0 {
            self.programView.alpha = 0
            programView.frame = CGRect(x:-400,y:506,width: self.programView.frame.width, height: self.programView.frame.height)
            UIView.animate(withDuration: 0.4){
                self.objectifView.frame = CGRect(x: 20,y: 506,width: self.objectifView.frame.width, height: self.objectifView.frame.height)
                self.objectifView.alpha = 1
            }
            
        }else if segChoiceRubrique.selectedSegmentIndex == 1 {
            
            UIView.transition(with: segChoiceRubrique, duration: 0.4,
                              options: .preferredFramesPerSecond30,
                              animations: {
                                self.programView.frame = CGRect(x: 20,y: 506,width: self.programView.frame.width, height: self.programView.frame.height)
                                self.objectifView.alpha = 0
                                self.programView.alpha = 1
                          })
            UIView.animate(withDuration: 1){
                self.objectifView.frame = CGRect(x: 1200,y: 506,width: self.objectifView.frame.width, height: self.objectifView.frame.height)
                //self.sourceButton.frame = CGRect(x: 26,y: 416,width: self.sourceButton.frame.width, height: self.sourceButton.frame.height)
                //self.cancelSourceButton.alpha = 0
                self.objectifView.alpha = 1
            }
            
        } else if segChoiceRubrique.selectedSegmentIndex == 2{
            objectifView.alpha = 1
        }
    }
    
    @IBAction func demanderOnClick(_ sender: Any) {
    }
    
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController        = self
        let interactor            = CatalogueFormationDetailsInteractor()
        let presenter             = CatalogueFormationDetailsPresenter()
        let router                = CatalogueFormationDetailsRouter()
        viewController.interactor = interactor
        viewController.router     = router
        interactor.presenter      = presenter
        presenter.viewController  = viewController
        router.viewController     = viewController
        router.dataStore          = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    var formation : FormationCatalogueDetails?
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        designImage ()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.getSkills(token:token)
        self.interactor?.gettingFormationCatalogueById(token: token, code: self.code)
        let url = URL(string: "https://mobile-int.accretio.io/documentsmanagement/api/document-mgm?moduleName=training&codeFile=" + (content!.picture)!)
        imageView.kf.setImage(with: url, completionHandler: {
            result in
            switch result {
            case .success:
                print(result)
                self.imageView.contentMode = UIView.ContentMode.scaleToFill
                self.imageView.clipsToBounds = true
                break
            case .failure:
                self.imageView.image = UIImage(named: "noImageAvailable")!
                self.imageView.contentMode = UIView.ContentMode.scaleAspectFit
            }
        })
        imageView.layer.cornerRadius = 15
        formationTitleLabel.text = content?.label
        if content?.duration == nil{
            sessionDuration.text = "undefined"
        }else{
            sessionDuration.text = String((content?.duration)!)
        }
        initiatorNameLastname.text = (content?.initiator?.firstName)! + " " + (content?.initiator?.lastName)!
        self.responsableNameLabel.text = (content?.trainingManager?.firstName!)! + " " + (content?.trainingManager?.lastName!)!
        
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = CatalogueFormationDetails.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CatalogueFormationDetails.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func designImage (){
        imageView.layer.cornerRadius                 = 2
        
        demanderButton.layer.cornerRadius            = 5
        demanderButton.layer.borderWidth             = 3
        demanderButton.layer.borderColor             = UIColor.white.cgColor
        
        objectifView.layer.cornerRadius              = 15
        objectifView.backgroundColor                 = UIColor.white
        objectifView.layer.shadowColor               = UIColor.systemGray4.cgColor
        objectifView.layer.shadowColor               = UIColor.systemGray4.cgColor
        objectifView.layer.shadowOpacity             = 1
        objectifView.layer.shadowOffset              = .zero
        objectifView.layer.shadowRadius              = 10
        objectifView.layer.shadowPath                = UIBezierPath(rect: objectifView.bounds).cgPath
        objectifView.layer.shouldRasterize           = true
        objectifView.layer.rasterizationScale        = UIScreen.main.scale
        
        programView.layer.cornerRadius              = 15
        programView.backgroundColor                 = UIColor.white
        programView.layer.shadowColor               = UIColor.systemGray4.cgColor
        programView.layer.shadowColor               = UIColor.systemGray4.cgColor
        programView.layer.shadowOpacity             = 1
        programView.layer.shadowOffset              = .zero
        programView.layer.shadowRadius              = 10
        programView.layer.shadowPath                = UIBezierPath(rect: programView.bounds).cgPath
        programView.layer.shouldRasterize           = true
        programView.layer.rasterizationScale        = UIScreen.main.scale
        
        self.programView.alpha = 0
        
    }
    
    
    
    //    MARK: - Getting data for formation by ID
    func getCatalogueDataDetails(response: FormationCatalogueDetails){
        print(response)
        self.formation = response
        print("aa")
        let goals = (formation?.goals?.textArea)! as String
        let programs = (formation?.program?.textArea)!
        print((formation?.trainer)!.count)
        print("aa")
        print((formation?.targetSkills)!)
//        print(skillsLabel[(formation?.targetSkills)!])
        print("--------------------------------------")
        locationLabel.text = formation?.place
        certificationLabel.text = "certification: " + String((formation?.certification)!)
        print((formation?.goals?.textArea)!)
        print("wwwwwww")
        viewControllerObjectif?.setLabel(label: (formation?.goals?.textArea)!)
        let html = """
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/yegor256/tacit@gh-pages/tacit-css-1.5.1.min.css"/>
<style>
p{font-size : 30px}
</style>
</head>
""" + goals
        webViewObjectif.loadHTMLString(html, baseURL: nil)
        
        
        let htmlProg  =  """
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/yegor256/tacit@gh-pages/tacit-css-1.5.1.min.css"/>
<style>
p{font-size : 50px}
</style>
</head>
""" + programs
        webViewProgramme.loadHTMLString(htmlProg, baseURL: nil)
    }
    
    
    
    
    func getSkills(response:[String: String]){
        print(response)
        skillsLabel = response
        
    }
    
}

extension CatalogueFormationDetailsViewController : UITableViewDataSource,UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if formation?.trainer!.count != 0 {
            return 5
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "formateurCell", for: indexPath) as?
            CFDetailsViewCell
            else {
                return UITableViewCell()
        }
        if (formation?.trainer![indexPath.row].firstName)! != "" && (formation?.trainer![indexPath.row].lastName)! != "" {
        cell.nomFormateurLabel.text = (formation?.trainer![indexPath.row].firstName)! as String + " " + (formation?.trainer![indexPath.row].lastName)!
        }
        cell.emailFormateurLabel.text = (formation?.trainer![indexPath.row].email)!
        cell.telephoneFormateurLabel.text = (formation?.trainer![indexPath.row].phone)!
        return cell
    }
    
    
    
    
}
