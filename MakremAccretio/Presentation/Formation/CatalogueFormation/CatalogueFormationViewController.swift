//
//  CatalogueFormationViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 5/12/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogueFormationDisplayLogic: class
{
    func displaySomething(viewModel: CatalogueFormation.Something.ViewModel)
    func getCatalogueData(response:ResponseCatalogue)
    func handleDismissAll()
    func showDataPopulation(response:Population)
    func addingSuccess(response : Bool)
    func addingFailure(response: Bool)
}

class CatalogueFormationViewController: UIViewController,CatalogueFormationDisplayLogic
{
    
    
    
    
    //    MARK:- Var & Let
    var interactor: CatalogueFormationBusinessLogic?
    var router: (NSObjectProtocol & CatalogueFormationRoutingLogic & CatalogueFormationDataPassing)?
    lazy var popUpWindow : PopUpWindow = {
        let view = PopUpWindow()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.layer.cornerRadius = 15
        view.delegate = self
        return view
    }()
    
    var dataValueForPopulation :  [PopulationElement] = []
    var dataValueCatalogue : [FormationCatalogue] = []
//    var page = 0
//    var size = 1
//    var totalPages = 0
    //    MARK:- IBOutlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var TitleOfView: UILabel!
    @IBOutlet weak var viewDemande: UIView!
    @IBOutlet weak var viewDemandePopUp: UIView!
    @IBOutlet weak var PopulationButton: UIButton!
    @IBOutlet weak var ImportanceButton: UIButton!
    @IBOutlet weak var DateButton: UIButton!
    @IBOutlet weak var urgenceSwitch: UISwitch!
    @IBOutlet weak var populationConcerneView: UIView!
    @IBOutlet weak var populationCollectionView: UICollectionView!
    @IBOutlet weak var bgView: UIView!
    @IBAction func onclickSwitch(_ sender: Any) {
    }
    @IBOutlet weak var validerButton: UIButton!
    @IBOutlet weak var annulerButton: UIButton!
    
    @IBOutlet weak var formationNameField: UITextField!
    @IBAction func formationTextField(_ sender: Any) {
    }
    
    @IBAction func closeView(_ sender: Any) {
        populationConcerneView.isHidden = true
        if PopulationCollectionViewCell.participants.count <= 3 &&  PopulationCollectionViewCell.participants.count > 0 {
            PopulationButton.setTitle(PopulationCollectionViewCell.participants.map{$0.firstName!}.joined(separator: " et "), for: .normal)
        }else if PopulationCollectionViewCell.participants.count > 3 {
            PopulationButton.setTitle(String(PopulationCollectionViewCell.participants.count) + " Participants", for: .normal)
        } else{
            PopulationButton.setTitle("Population concern√©e", for: .normal)
        }
        
    }
    
    //    MARK:- Button actions
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: false)
    }
    @IBAction func DateButton(_ sender: Any) {
        let datePicker = UIDatePicker()
        datePicker.datePickerMode = .date
        let alert = UIAlertController(title: "\n\n\n\n\n\n\n\n\n\n\n", message: nil, preferredStyle: .actionSheet)
        alert.view.addSubview(datePicker)
        
        
        let ok = UIAlertAction(title: "OK", style: .default) { (action) in
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd"
            let dateString = dateFormatter.string(from: datePicker.date)
            self.DateButton.setTitle(dateString, for: .normal)
        }
        let cancel = UIAlertAction(title: "Cancel", style: .destructive, handler: nil)
        alert.addAction(ok)
        alert.addAction(cancel)
        present(alert, animated: true, completion: nil)
        
    }
    
    @IBAction func ImportanceButton(_ sender: Any) {
        let actionSheet = UIAlertController(title: "Selectionnez importance foramation ", message: nil, preferredStyle: .actionSheet)
        let title = self.ImportanceButton.currentTitle
        let q1 = UIAlertAction(title: "Q1", style: .default, handler: { _ in
            self.ImportanceButton.setTitle("Q1", for: .normal)
        })
        let q2 = UIAlertAction(title: "Q2", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q2", for: .normal)
        })
        let q3 = UIAlertAction(title: "Q3", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q3", for: .normal)
        })
        let q4 = UIAlertAction(title: "Q4", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q4", for: .normal)
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel)
        actionSheet.addAction(q1)
        actionSheet.addAction(q2)
        actionSheet.addAction(q3)
        actionSheet.addAction(q4)
        actionSheet.addAction(cancelAction)
        
        // 5
        self.present(actionSheet, animated: true, completion: nil)
    }
   
    @IBAction func PopulationButton(_ sender: Any) {
        populationConcerneView.isHidden = false
       
        print("ww")
    }
    @IBAction func ConfirmerButton(_ sender: Any) {
        let newArrayOfParticipant = PopulationCollectionViewCell.participants.map{ InitiatorSessionRequest(registrationNumber: $0.registrationNumber) }
        var newObject = TrainingRequestModelAdd()
        newObject.importance = (ImportanceButton.titleLabel?.text)!
        newObject.targetEmployees = newArrayOfParticipant
        newObject.trainingRequestModelDescription = formationNameField.text
        newObject.priority = false
        newObject.status = "PROGRESS"
        newObject.creationDate = "2020-08-10T18:17:39.111Z"
        newObject.limitDate = "2020-08-10T18:17:39.111Z"
        
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.addCatalogue(token: token, param: newObject)
//        self.navigationController?.popViewController(animated: false)
    }
    
    
    func addingSuccess(response: Bool) {
        print("Adding true")
    }
    
    func addingFailure(response: Bool) {
        print("adding false ")
    }
    
    
    @IBAction func DemandeHorsCatalogue(_ sender: Any) {
        viewDemande.isHidden = false
        
        //        view.layer.opacity = 0.1
    }
    
    
    
    @IBAction func ClosePopUpAddFormation(_ sender: Any) {
        viewDemande.isHidden = true
    }
    
    
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = CatalogueFormationInteractor()
        let presenter = CatalogueFormationPresenter()
        let router = CatalogueFormationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        viewDemande.isHidden                      = true
        populationConcerneView.isHidden           = true
        populationConcerneView.layer.cornerRadius = 15
        viewDemandePopUp.layer.cornerRadius       = 15
        PopulationButton.layer.borderColor        = UIColor.black.cgColor
        PopulationButton.layer.borderWidth        = 1
        PopulationButton.layer.cornerRadius       = 15
        PopulationButton.layer.backgroundColor    = UIColor.systemGray3.cgColor
        ImportanceButton.layer.cornerRadius       = 15
        ImportanceButton.layer.borderColor        = UIColor.black.cgColor
        ImportanceButton.layer.borderWidth        = 1
        ImportanceButton.layer.backgroundColor    = UIColor.systemGray3.cgColor
        DateButton.layer.cornerRadius             = 15
        DateButton.layer.borderColor              = UIColor.black.cgColor
        DateButton.layer.borderWidth              = 1
        DateButton.layer.backgroundColor          = UIColor.systemGray3.cgColor
        
        doSomething()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        print(token)
        self.interactor?.showCatalogueFormation(token: token,page: 0, size: 10)
        self.interactor?.showListPopulation(token: token)
        view.addSubview(visualEffectView)
        designingEffectView()
        validerButton.layer.cornerRadius = 5
        annulerButton.layer.cornerRadius = 5
    }
    
    
    
    // MARK: Getting Data
    
    func doSomething()
    {
        let request = CatalogueFormation.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CatalogueFormation.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func getCatalogueData(response:ResponseCatalogue){
        print(response)
        dataValueCatalogue.append(contentsOf : response.content)
//        self.totalPages = response.totalPages!
//        self.page+=1
        tableView.reloadData()
    }
    
    func showDataPopulation(response:Population){
        self.dataValueForPopulation = response
        self.populationCollectionView.reloadData()
    }
    
    func designingPopUp(){
        view.addSubview(popUpWindow)
        popUpWindow.centerYAnchor.constraint(equalTo: view.centerYAnchor,constant: -40).isActive = true
        popUpWindow.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        popUpWindow.heightAnchor.constraint(equalToConstant: view.frame.width - 64).isActive = true
        popUpWindow.widthAnchor.constraint(equalToConstant: view.frame.width-64).isActive = true
    }
    
    let visualEffectView: UIVisualEffectView = {
        let blurEffect = UIBlurEffect(style: .dark)
        let view = UIVisualEffectView(effect: blurEffect)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    func designingEffectView(){
        visualEffectView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        visualEffectView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        visualEffectView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        visualEffectView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        visualEffectView.alpha = 0
    }
    
}

extension CatalogueFormationViewController: PopUpDelegate{
    func handleDismissAll() {
        UIView.animate(withDuration: 0.5, animations: {
            self.visualEffectView.alpha = 0
            self.popUpWindow.alpha = 0
            self.popUpWindow.transform = CGAffineTransform(scaleX: 1.3, y: 1.3)
        }) { (_) in
            self.popUpWindow.removeFromSuperview()
            print("Did remove pop up window..")
        }
    }
}

extension UIColor {
    static func mainBlue() -> UIColor {
        return UIColor(red: 17/255, green: 154/255, blue: 237/255, alpha: 1)
    }
    
    
}


//MARK:- Extension for tableView
extension CatalogueFormationViewController : UITableViewDelegate, UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
            return dataValueCatalogue.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
       
       
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "catalogueCell", for: indexPath) as?
            CatalogueFormationViewCell
            else {
                return UITableViewCell()
        }
        cell.formationNameLabel.text = dataValueCatalogue[indexPath.row].label
        cell.initiatorLabel.text = (dataValueCatalogue[indexPath.row].initiator?.firstName)! + " " + (dataValueCatalogue[indexPath.row].initiator?.lastName)!
        let clearedStartDate =  dataValueCatalogue[indexPath.row].creationDate!.components(separatedBy: "T")
        cell.dateLabel.text = clearedStartDate[0]
        cell.themeLabel.text = dataValueCatalogue[indexPath.row].theme
        let BaseURL = "https://mobile-int.accretio.io/"
//        let BaseURL = "https://accretio-2-tnr.advyteam.com/"
        let url = URL(string: BaseURL + "documentsmanagement/api/document-mgm?moduleName=training&codeFile=" + (dataValueCatalogue[indexPath.row].picture)!)
        //        let token = UserDefaults.standard.string(forKey: "accessToken")!
        cell.formationImageView.kf.setImage(with: url){
                    result in
                    switch result {
                    case .success:
                        print(result)
                        cell.formationImageView.contentMode = UIView.ContentMode.scaleToFill
                        cell.formationImageView.clipsToBounds = true
                        break
                    case .failure:
                        cell.formationImageView.image = UIImage(named: "noImageAvailable")!
                        cell.formationImageView.contentMode = UIView.ContentMode.scaleAspectFit
                    }
                }
       
        
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(identifier: "CatalogueFormationDetailsViewController") as!
        CatalogueFormationDetailsViewController
        vc.content = dataValueCatalogue[indexPath.row]
        vc.code = dataValueCatalogue[indexPath.row].code!
        self.navigationController?.pushViewController(vc,animated: true)
        
    }
    
    


    
}

//  MARK: EXtension for population collectionViw:
extension CatalogueFormationViewController : UICollectionViewDelegate, UICollectionViewDataSource , PopulationCollectionViewCellDelegate{
    
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataValueForPopulation.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let  cell = populationCollectionView.dequeueReusableCell(withReuseIdentifier: "population", for: indexPath) as?
            PopulationCollectionViewCell
            else {
                return UICollectionViewCell()
        }
        
        cell.nomParticipant.text = dataValueForPopulation[indexPath.row].firstName! + " " + dataValueForPopulation[indexPath.row].lastName!
        cell.populationLabel.text = dataValueForPopulation[indexPath.row].registrationNumber
        cell.participant = dataValueForPopulation[indexPath.row]
        return cell
    }
   
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let cell = populationCollectionView.dequeueReusableCell(withReuseIdentifier: "population", for: indexPath) as! PopulationCollectionViewCell
        //initialize cell and get back the actual Value of the switch and set it to my object???
        
        if cell.switcherOn.isOn{
            print("switch on " )
        }else{
            print("switch off ")
        }
        cell.delegate = self
        didChangeSwitchValue(value: false, participant: dataValueForPopulation[indexPath.row])
    }
    
    func didChangeSwitchValue(value: Bool, participant: PopulationElement) {
        print("qqq")
    }
    
}

extension UIImageView {
    func roundImageCorners(_ corners: UIRectCorner, radius: CGFloat) {
         let path = UIBezierPath(roundedRect: self.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
         let mask = CAShapeLayer()
         mask.path = path.cgPath
         self.layer.mask = mask
    }
}
