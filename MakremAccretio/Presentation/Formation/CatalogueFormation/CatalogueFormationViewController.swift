//
//  CatalogueFormationViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 5/12/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogueFormationDisplayLogic: class
{
    func displaySomething(viewModel: CatalogueFormation.Something.ViewModel)
    func getCatalogueData(response:ResponseCatalogue)
    func handleDismissAll()
}

class CatalogueFormationViewController: UIViewController, UITableViewDelegate,UITableViewDataSource,CatalogueFormationDisplayLogic
{
    
    //    MARK:- Var & Let
    var interactor: CatalogueFormationBusinessLogic?
    var router: (NSObjectProtocol & CatalogueFormationRoutingLogic & CatalogueFormationDataPassing)?
    lazy var popUpWindow : PopUpWindow = {
        let view = PopUpWindow()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.layer.cornerRadius = 15
        view.delegate = self
        return view
    }()
    
    //    MARK:- IBOutlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var TitleOfView: UILabel!
    @IBOutlet weak var viewDemande: UIView!
    @IBOutlet weak var viewDemandePopUp: UIView!
    @IBOutlet weak var PopulationButton: UIButton!
    @IBOutlet weak var ImportanceButton: UIButton!
    @IBOutlet weak var DateButton: UIButton!
    
    
    
    
    
    //    MARK:- Button actions
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: false)
    }
    @IBAction func DateButton(_ sender: Any) {
        let datePicker = UIDatePicker()
        datePicker.datePickerMode = .date
        let alert = UIAlertController(title: "\n\n\n\n\n\n\n\n\n\n\n", message: nil, preferredStyle: .actionSheet)
        alert.view.addSubview(datePicker)
        
        
        let ok = UIAlertAction(title: "OK", style: .default) { (action) in
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd"
            let dateString = dateFormatter.string(from: datePicker.date)
            self.DateButton.setTitle(dateString, for: .normal)
        }
        let cancel = UIAlertAction(title: "Concel", style: .destructive, handler: nil)
        alert.addAction(ok)
        alert.addAction(cancel)
        present(alert, animated: true, completion: nil)    }
    
    @IBAction func ImportanceButton(_ sender: Any) {
        let actionSheet = UIAlertController(title: "Selectionnez importance foramation ", message: nil, preferredStyle: .actionSheet)
        let q1 = UIAlertAction(title: "Q1", style: .default, handler: { _ in
            self.ImportanceButton.setTitle("Q1", for: .normal)
        })
        let q2 = UIAlertAction(title: "Q2", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q2", for: .normal)
        })
        let q3 = UIAlertAction(title: "Q3", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q3", for: .normal)
        })
        let q4 = UIAlertAction(title: "Q4", style: .default,handler: { _ in
            self.ImportanceButton.setTitle("Q4", for: .normal)
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel)
        actionSheet.addAction(q1)
        actionSheet.addAction(q2)
        actionSheet.addAction(q3)
        actionSheet.addAction(q4)
        actionSheet.addAction(cancelAction)
        
        // 5
        self.present(actionSheet, animated: true, completion: nil)
    }
    @IBAction func AnnulerButton(_ sender: Any) {
        viewDemande.isHidden = true
    }
    @IBAction func PopulationButton(_ sender: Any) {
        
    }
    @IBAction func ConfirmerButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: false)
    }
    @IBAction func DemandeHorsCatalogue(_ sender: Any) {
        viewDemande.isHidden = false
        
//        view.layer.opacity = 0.1
    }
    
    @IBOutlet weak var bgView: UIView!
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = CatalogueFormationInteractor()
        let presenter = CatalogueFormationPresenter()
        let router = CatalogueFormationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        viewDemande.isHidden = true
        viewDemandePopUp.layer.cornerRadius = 15
        PopulationButton.layer.borderColor = UIColor.black.cgColor
        PopulationButton.layer.borderWidth = 1
        PopulationButton.layer.cornerRadius = 15
        PopulationButton.layer.backgroundColor = UIColor.systemGray3.cgColor
        ImportanceButton.layer.cornerRadius = 15
        ImportanceButton.layer.borderColor = UIColor.black.cgColor
        ImportanceButton.layer.borderWidth = 1
        ImportanceButton.layer.backgroundColor = UIColor.systemGray3.cgColor
        doSomething()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        print(token)
        self.interactor?.showCatalogueFormation(token: token)
        view.addSubview(visualEffectView)
        designingEffectView()
        
    }
    
    // MARK: Manipulating TableView
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataValueCatalogue.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "catalogueCell", for: indexPath) as?
            CatalogueFormationViewCell
            else {
                return UITableViewCell()
        }
        cell.formationNameLabel.text = dataValueCatalogue[indexPath.row].label
        cell.initiatorLabel.text = dataValueCatalogue[indexPath.row].initiator?.firstName
        cell.dateLabel.text = String(dataValueCatalogue[indexPath.row].creationDate!)
        cell.themeLabel.text = dataValueCatalogue[indexPath.row].theme
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let vc = storyboard.instantiateViewController(identifier: "CatalogueFormationDetailsViewController") as!
        CatalogueFormationDetailsViewController
        
        self.navigationController?.pushViewController(vc,animated: true)
        
    }
    
    // MARK: Getting Data
    var dataValueCatalogue : [FormationCatalogue] = []
    
    func doSomething()
    {
        let request = CatalogueFormation.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CatalogueFormation.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func getCatalogueData(response:ResponseCatalogue){
        print(response)
        dataValueCatalogue = response.content
        tableView.reloadData()
    }
    
    func designingPopUp(){
        view.addSubview(popUpWindow)
        popUpWindow.centerYAnchor.constraint(equalTo: view.centerYAnchor,constant: -40).isActive = true
        popUpWindow.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        popUpWindow.heightAnchor.constraint(equalToConstant: view.frame.width - 64).isActive = true
        popUpWindow.widthAnchor.constraint(equalToConstant: view.frame.width-64).isActive = true
    }
    
    let visualEffectView: UIVisualEffectView = {
        let blurEffect = UIBlurEffect(style: .dark)
        let view = UIVisualEffectView(effect: blurEffect)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    func designingEffectView(){
        visualEffectView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        visualEffectView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        visualEffectView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        visualEffectView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        visualEffectView.alpha = 0
    }
    
    
}

extension CatalogueFormationViewController: PopUpDelegate{
    func handleDismissAll() {
        UIView.animate(withDuration: 0.5, animations: {
            self.visualEffectView.alpha = 0
            self.popUpWindow.alpha = 0
            self.popUpWindow.transform = CGAffineTransform(scaleX: 1.3, y: 1.3)
        }) { (_) in
            self.popUpWindow.removeFromSuperview()
            print("Did remove pop up window..")
        }
    }
}

extension UIColor {
    static func mainBlue() -> UIColor {
        return UIColor(red: 17/255, green: 154/255, blue: 237/255, alpha: 1)
    }
    
    
}
