//
//  FormationCollaborateurViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 5/8/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormationCollaborateurDisplayLogic: class
{
    func displaySomething(viewModel: FormationCollaborateur.Something.ViewModel)
    func getData(response:ResponseFormationCollaborateur)
}

class FormationCollaborateurViewController: UIViewController, FormationCollaborateurDisplayLogic, UITableViewDataSource, UITableViewDelegate
{
    
    
    
    
     
    var interactor: FormationCollaborateurBusinessLogic?
    var router: (NSObjectProtocol & FormationCollaborateurRoutingLogic & FormationCollaborateurDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FormationCollaborateurInteractor()
        let presenter = FormationCollaborateurPresenter()
        let router = FormationCollaborateurRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.getListFormationCollaborateur(token: token)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorColor = UIColor.white
        

    }
    
    // MARK: UI Declarations:
 
    @IBOutlet weak var tableView: UITableView!
    
    func doSomething()
    {
        let request = FormationCollaborateur.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: FormationCollaborateur.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    @IBAction func backButton(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
    
    
    
    

    
    
//    MARK: Affecting data to tableView
    
    var dataValueDemandeCollaborateur : [CollaborateurFormation] = []
    func getData(response:ResponseFormationCollaborateur){
        dataValueDemandeCollaborateur = response.content
        tableView.reloadData()
    }
    
//  MARK: Manipulating TableView
    func numberOfSections(in tableView: UITableView) -> Int {
         return 1
     }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if dataValueDemandeCollaborateur.count == 0 {
            tableView.setEmptyView2(title: "You don't have any formation.", message: "Your formation will be in here.", messageImage: #imageLiteral(resourceName: "messageImage"))
        }
        else {
            tableView.restore2()
        }
        return dataValueDemandeCollaborateur.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "CollabCell", for: indexPath) as?
            FormationCollaborateurViewControllerCell
            else {
                return UITableViewCell()
        }
        cell.formationNameLabel.text = String(dataValueDemandeCollaborateur[indexPath.row].label!)
        if dataValueDemandeCollaborateur[indexPath.row].sessionStartDate == nil || String(dataValueDemandeCollaborateur[indexPath.row].sessionEndDate!)
== nil || dataValueDemandeCollaborateur[indexPath.row].sessionLabel! == nil{
            cell.DateDebutLabel.text = "undefined date"
            cell.DateFinLabel.text = "undefined date"
            cell.sessionLabel.text = "undefined session"
        }else{
            cell.DateDebutLabel.text = String(dataValueDemandeCollaborateur[indexPath.row].sessionStartDate!)
            cell.DateFinLabel.text = String(dataValueDemandeCollaborateur[indexPath.row].sessionEndDate!)
            cell.sessionLabel.text =  dataValueDemandeCollaborateur[indexPath.row].sessionLabel!
        }
         
        let initiatorname = String((dataValueDemandeCollaborateur[indexPath.row].initiator?.firstName)!)
//        let initiatorLastname = String((dataValueDemandeCollaborateur[indexPath.row].initiator?.lastName)!)
        cell.initiateurLabel.text = initiatorname
        
        return cell
    }


}







extension UITableView {
    func setEmptyView2(title: String, message: String, messageImage: UIImage) {
        
        let emptyView = UIView(frame: CGRect(x: self.center.x, y: self.center.y, width: self.bounds.size.width, height: self.bounds.size.height))
        
        let messageImageView = UIImageView()
        let titleLabel = UILabel()
        let messageLabel = UILabel()
        
        messageImageView.backgroundColor = .clear
        
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        messageImageView.translatesAutoresizingMaskIntoConstraints = false
        messageLabel.translatesAutoresizingMaskIntoConstraints = false
        
        titleLabel.textColor = UIColor.black
        titleLabel.font = UIFont(name: "HelveticaNeue-Bold", size: 18)
        
        messageLabel.textColor = UIColor.lightGray
        messageLabel.font = UIFont(name: "HelveticaNeue-Regular", size: 17)
        
        emptyView.addSubview(titleLabel)
        emptyView.addSubview(messageImageView)
        emptyView.addSubview(messageLabel)
        
        messageImageView.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        messageImageView.centerYAnchor.constraint(equalTo: emptyView.centerYAnchor, constant: -20).isActive = true
        messageImageView.widthAnchor.constraint(equalToConstant: 150).isActive = true
        messageImageView.heightAnchor.constraint(equalToConstant: 150).isActive = true
        
        titleLabel.topAnchor.constraint(equalTo: messageImageView.bottomAnchor, constant: 10).isActive = true
        titleLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        
        messageLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 10).isActive = true
        messageLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        
        messageImageView.image = messageImage
        titleLabel.text = title
        messageLabel.text = message
        messageLabel.numberOfLines = 0
        messageLabel.textAlignment = .center
        
        UIView.animate(withDuration: 1, animations: {
            
            messageImageView.transform = CGAffineTransform(rotationAngle: .pi / 10)
        }, completion: { (finish) in
            UIView.animate(withDuration: 1, animations: {
                messageImageView.transform = CGAffineTransform(rotationAngle: -1 * (.pi / 10))
            }, completion: { (finishh) in
                UIView.animate(withDuration: 1, animations: {
                    messageImageView.transform = CGAffineTransform.identity
                })
            })
            
        })
        
        self.backgroundView = emptyView
        self.separatorStyle = .none
    }
    
    func restore2() {
        self.backgroundView = nil
        self.separatorStyle = .singleLine
    }
    
}

