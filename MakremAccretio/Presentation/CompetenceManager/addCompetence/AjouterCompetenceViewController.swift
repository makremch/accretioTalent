//
//  AjouterCompetenceViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 11/11/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

protocol AjouterCompetenceDisplayLogic: class
{
    func displaySomething(viewModel: AjouterCompetence.Something.ViewModel)
    func getDataCompetenceManager(skillsLabel:[String: String], skillsCompetence:[String:String])
    func getDataLevel(level: LevelResponse)
}

class AjouterCompetenceViewController: UIViewController, AjouterCompetenceDisplayLogic
{
    
    
    // MARK:- boutlets :
    @IBOutlet weak var competenceButton        : UIButton!
    @IBOutlet weak var niveauButton            : UIButton!
    @IBOutlet weak var dateAcquisitionButton   : UIButton!
    @IBOutlet weak var sourceButton            : UIButton!
    @IBOutlet weak var annulerButton           : UIButton!
    @IBOutlet weak var validerButton           : UIButton!
    @IBOutlet weak var competenceView          : UIView!
    @IBOutlet weak var viewTitle               : UILabel!
    @IBOutlet weak var tableView               : UITableView!
    @IBOutlet weak var tableViewDeux           : UITableView!
    @IBOutlet weak var NiveauView              : UIView!
    @IBOutlet weak var cancelNiveauView        : UIButton!
    @IBOutlet weak var viewAdding              : UIView!
    @IBOutlet weak var evaluationButton        : UIButton!
    @IBOutlet weak var recrutingButton         : UIButton!
    
    
    
    
    // MARK:- let & var :
    var interactor             : AjouterCompetenceBusinessLogic?
    var router                 : (NSObjectProtocol & AjouterCompetenceRoutingLogic & AjouterCompetenceDataPassing)?
    var skillsLabel            : [String:String] = ["":""]
    var skillsList             : [String]        = []
    var codeSkillsList         : [String]        = []
    var codeSkill              : String          = ""
    var skillsCompetenceCode   : [String:String] = ["":""]
    var levels                 : [Level]         = []
    var niveauSelected         : String          = ""
    var sourceSelected         : String          = ""
    
    
    
    
    // MARK:- Button actions :
    @IBAction func selectionnerCompetenceOnClick(_ sender: Any) {
        competenceView.isHidden                   = false
        viewTitle.text                            = "Sélectionner compétence"
    }
    
    @IBAction func annulerOnClick(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func cancelCompetenceView(_ sender: Any) {
        competenceView.isHidden                    = true
        viewTitle.text                             = "Ajouter compétence"
    }
    
    @IBAction func cancelNiveauOnClick(_ sender: Any) {
        NiveauView.isHidden                        = true
        viewAdding.isHidden                        = false
    }
    
    @IBAction func selectionnerNiveauOnClick(_ sender: Any?) {
        NiveauView.isHidden                        = false
        viewAdding.isHidden                        = true
    }
    
    @IBAction func evaluationButtonOnClick(_ sender: Any) {
        self.sourceSelected                        = "Evaluation"
    }
    
    @IBAction func recrutingButtonOnClick(_ sender: Any) {
        self.sourceSelected                        = "Recrutement"
    }
    
    @IBAction func formationButtonOnClick(_ sender: Any) {
        self.sourceSelected                        = "Formation"
    }
    
    
    
    
    
    
    // MARK:- Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController           = self
        let interactor               = AjouterCompetenceInteractor()
        let presenter                = AjouterCompetencePresenter()
        let router                   = AjouterCompetenceRouter()
        viewController.interactor    = interactor
        viewController.router        = router
        interactor.presenter         = presenter
        presenter.viewController     = viewController
        router.viewController        = viewController
        router.dataStore             = interactor
    }
    
    func configuringbuttonAndViews(){
        viewAdding.layer.cornerRadius         = 10
        viewAdding.layer.borderColor          = UIColor.systemGray5.cgColor
        
        competenceView.layer.cornerRadius         = 10
        competenceButton.layer.cornerRadius       = 5
        competenceButton.backgroundColor          = UIColor.white
        competenceButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        competenceButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        competenceButton.layer.shadowOpacity      = 1
        competenceButton.layer.shadowOffset       = .zero
        competenceButton.layer.shadowRadius       = 5
        competenceButton.layer.shadowPath         = UIBezierPath(rect: competenceButton.bounds).cgPath
        competenceButton.layer.shouldRasterize    = true
        competenceButton.layer.rasterizationScale = UIScreen.main.scale
        competenceButton.layer.borderWidth        = 1
        competenceButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        niveauButton.layer.cornerRadius       = 5
        niveauButton.backgroundColor          = UIColor.white
        niveauButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        niveauButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        niveauButton.layer.shadowOpacity      = 1
        niveauButton.layer.shadowOffset       = .zero
        niveauButton.layer.shadowRadius       = 5
        niveauButton.layer.shadowPath         = UIBezierPath(rect: niveauButton.bounds).cgPath
        niveauButton.layer.shouldRasterize    = true
        niveauButton.layer.rasterizationScale = UIScreen.main.scale
        niveauButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        sourceButton.layer.cornerRadius       = 5
        sourceButton.backgroundColor          = UIColor.white
        sourceButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        sourceButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        sourceButton.layer.shadowOpacity      = 1
        sourceButton.layer.shadowOffset       = .zero
        sourceButton.layer.shadowRadius       = 5
        sourceButton.layer.shadowPath         = UIBezierPath(rect: sourceButton.bounds).cgPath
        sourceButton.layer.shouldRasterize    = true
        sourceButton.layer.rasterizationScale = UIScreen.main.scale
        sourceButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        annulerButton.layer.cornerRadius       = 5
        annulerButton.backgroundColor          = UIColor.white
        annulerButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        annulerButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        annulerButton.layer.shadowOpacity      = 1
        annulerButton.layer.shadowOffset       = .zero
        annulerButton.layer.shadowRadius       = 5
        annulerButton.layer.shadowPath         = UIBezierPath(rect: annulerButton.bounds).cgPath
        annulerButton.layer.shouldRasterize    = true
        annulerButton.layer.rasterizationScale = UIScreen.main.scale
        annulerButton.layer.borderColor        = UIColor.systemBlue.cgColor
        annulerButton.layer.borderWidth        = 2.5
        
        validerButton.layer.cornerRadius       = 5
        validerButton.backgroundColor          = UIColor.systemBlue
        validerButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        validerButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        validerButton.layer.shadowOpacity      = 1
        validerButton.layer.shadowOffset       = .zero
        validerButton.layer.shadowRadius       = 5
        validerButton.layer.shadowPath         = UIBezierPath(rect: validerButton.bounds).cgPath
        validerButton.layer.shouldRasterize    = true
        validerButton.layer.rasterizationScale = UIScreen.main.scale
        validerButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        evaluationButton.layer.cornerRadius       = 5
        evaluationButton.backgroundColor          = UIColor.white
        evaluationButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        evaluationButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        evaluationButton.layer.shadowOpacity      = 1
        evaluationButton.layer.shadowOffset       = .zero
        evaluationButton.layer.shadowRadius       = 5
        evaluationButton.layer.shadowPath         = UIBezierPath(rect: evaluationButton.bounds).cgPath
        evaluationButton.layer.shouldRasterize    = true
        evaluationButton.layer.rasterizationScale = UIScreen.main.scale
        evaluationButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        recrutingButton.layer.cornerRadius       = 5
        recrutingButton.backgroundColor          = UIColor.white
        recrutingButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        recrutingButton.layer.shadowColor        = UIColor.systemGray4.cgColor
        recrutingButton.layer.shadowOpacity      = 1
        recrutingButton.layer.shadowOffset       = .zero
        recrutingButton.layer.shadowRadius       = 5
        recrutingButton.layer.shadowPath         = UIBezierPath(rect: recrutingButton.bounds).cgPath
        recrutingButton.layer.shouldRasterize    = true
        recrutingButton.layer.rasterizationScale = UIScreen.main.scale
        recrutingButton.layer.borderColor        = UIColor.systemGray5.cgColor
        
        competenceView.isHidden                = true
        NiveauView.isHidden                    = true
        competenceView.layer.cornerRadius      = 10
        NiveauView.layer.cornerRadius          = 10
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene       = segue.identifier {
            let selector   = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router  = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        configuringbuttonAndViews()
        let token                                                 = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.getListCompetenceManager(token: token)
        tableViewDeux.isScrollEnabled                             = (tableViewDeux.contentSize.height <= self.tableViewDeux.frame.height);
        self.tableViewDeux.alwaysBounceVertical                   = false
        self.tableViewDeux.isScrollEnabled                        = self.tableViewDeux.contentSize.height > self.tableViewDeux.frame.size.height
    }
    
    
    // MARK: Do something
    
    func doSomething()
    {
        let request = AjouterCompetence.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: AjouterCompetence.Something.ViewModel){}
    
    
    
                                                  //       MARK: - Getting data from interactor Competence Response
    func getDataCompetenceManager(skillsLabel:[String: String], skillsCompetence:[String:String]){
        self.skillsCompetenceCode = skillsCompetence
        self.skillsLabel          = skillsLabel
        self.skillsList           = Array(skillsLabel.values)
        self.codeSkillsList       = Array(skillsLabel.keys)
        tableView.reloadData()
    }
    
                                                 //       MARK: - Getting data from interactor Level Response
    func getDataLevel(level: LevelResponse){
        self.levels = level.levels
        self.tableViewDeux.reloadData()
    }
}






                                                 // MARK: -TableView extensions
extension  AjouterCompetenceViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        var numberOfRowsToReturn : Int = 0
        if tableView == tableView{
            numberOfRowsToReturn = self.skillsLabel.count
        }else if  tableView == tableViewDeux{
            numberOfRowsToReturn = 4
        }
        return numberOfRowsToReturn
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        var cellToReturn = UITableViewCell()
        
        if tableView == self.tableView {
            guard let  cell = tableView.dequeueReusableCell(withIdentifier: "compsCell", for: indexPath) as? CompetencesTableViewCell
            else {
                return UITableViewCell()
            }
            if self.skillsList.count != 0 {
                cell.nomCompetenceLabel.text = self.skillsList[indexPath.item]
            }
            cellToReturn = cell
        }else if tableView == self.tableViewDeux{
            guard let  cell = tableView.dequeueReusableCell(withIdentifier: "niveauCell", for: indexPath) as?
                    NiveauCompetenceTableViewCell
            else {
                return UITableViewCell()
            }
            if self.levels.count > 0 && indexPath.row < self.levels.count {
                cell.niveauCompetence.text = self.levels[indexPath.row].label
                    cellToReturn = cell
            }
        }
        return cellToReturn
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView == self.tableView{
            self.codeSkill = codeSkillsList[indexPath.item]
            let classificationCode = (self.skillsCompetenceCode[self.codeSkill])!
            let token = UserDefaults.standard.string(forKey: "accessToken")!
            self.interactor?.getListCompetenceLevel(token: token, codeCompetence: classificationCode)
            competenceView.isHidden = true
            competenceButton.setTitle(self.skillsLabel[self.codeSkill], for: .normal)

        }else if tableView == self.tableViewDeux{
            niveauSelected = (self.levels[indexPath.row].label)!
            NiveauView.isHidden = true
            competenceView.isHidden = true
            viewAdding.isHidden = false
            niveauButton.setTitle(niveauSelected, for: .normal)
        }
    }
}

