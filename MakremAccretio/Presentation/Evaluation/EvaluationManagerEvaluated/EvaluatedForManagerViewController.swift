//
//  EvaluatedForManagerViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 8/19/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EvaluatedForManagerDisplayLogic: class
{
    func displaySomething(viewModel: EvaluatedForManager.Something.ViewModel)
    func displayData(response:EvaluatedResponse)
}

class EvaluatedForManagerViewController: UIViewController, EvaluatedForManagerDisplayLogic
{
    
    //    MARK: IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    //    MARK: var declarations
    var interactor: EvaluatedForManagerBusinessLogic?
    var router: (NSObjectProtocol & EvaluatedForManagerRoutingLogic & EvaluatedForManagerDataPassing)?
    var dataEvaluated : [EvaluatedElement] = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EvaluatedForManagerInteractor()
        let presenter = EvaluatedForManagerPresenter()
        let router = EvaluatedForManagerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        self.interactor?.showEvaluatedManager(token: token)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = EvaluatedForManager.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: EvaluatedForManager.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    
    func displayData(response:EvaluatedResponse){
        for user in response.content!{
            dataEvaluated.append(user)
            print(user.status!)
            print("---------------------------------")
        }
        tableView.reloadData()
    }
}

extension EvaluatedForManagerViewController : UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataEvaluated.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let  cell = tableView.dequeueReusableCell(withIdentifier: "evaluatedCell", for: indexPath) as? EvaluatedTableViewCell
            else {
                return UITableViewCell()
        }
        cell.nameLabel.text = (dataEvaluated[indexPath.row].evaluated?.firstName)! + " " + (dataEvaluated[indexPath.row].evaluated?.lastName)!
        if (dataEvaluated[indexPath.row].status) == "INP"{
            cell.statusLabel.text = "En cours"
            cell.statusView.backgroundColor = UIColor.orange.withAlphaComponent(0.5)
        }else{
            cell.statusView.backgroundColor = UIColor.green.withAlphaComponent(0.5)
        }
        let numberEvaluators  = dataEvaluated[indexPath.row].evaluators!.count
        cell.evaluateurNumberLabel.text = String(numberEvaluators) + " Evaluateurs"
        cell.noteGlobaleLabel.text = "Note: " + String(dataEvaluated[indexPath.row].globalMark!)
        return cell
    }
    
    
}
