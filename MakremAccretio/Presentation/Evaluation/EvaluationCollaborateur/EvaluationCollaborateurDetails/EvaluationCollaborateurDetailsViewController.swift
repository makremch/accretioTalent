//
//  EvaluationCollaborateurDetailsViewController.swift
//  MakremAccretio
//
//  Created by Makrem chambah on 7/10/20.
//  Copyright (c) 2020 Makrem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EvaluationCollaborateurDetailsDisplayLogic: class
{
    func displaySomething(viewModel: EvaluationCollaborateurDetails.Something.ViewModel)
    func displayDetails(responses : EvaluationDetailsResponse)
    func displayCards(responses : [CommunTargetsCard])
    func diplayCardsError()
}

class EvaluationCollaborateurDetailsViewController: UIViewController, EvaluationCollaborateurDetailsDisplayLogic
{
    var interactor: EvaluationCollaborateurDetailsBusinessLogic?
    var router: (NSObjectProtocol & EvaluationCollaborateurDetailsRoutingLogic & EvaluationCollaborateurDetailsDataPassing)?
    var evaluationData : EvaluationCollab?
    var evaluationCards : [CommunTargetsCard] = []
    var content : EvaluationCollab?
    
    @IBOutlet weak var tableView: UITableView!
    
    
    
//    MARK:- IBOutlets
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var closeButtonCommentaireView: UIButton!
    @IBOutlet weak var closeButtonObjCommuns: UIButton!
    @IBOutlet weak var SoumettreCommentaire: UIButton!
    @IBOutlet weak var UserNameLAbel: UILabel!
    @IBOutlet weak var EmployeTypeLabel: UILabel!
    @IBOutlet weak var NameEvaluator: UILabel!
    @IBOutlet weak var blackView: UIView!
    @IBOutlet weak var objectifsIndividuelsView: UIView!
    @IBOutlet weak var commentairesView: UIView!
    @IBOutlet weak var competencesView: UIView!
    @IBOutlet weak var fixationView: UIView!
    @IBOutlet weak var formationView: UIView!
    @IBOutlet weak var objectifsCommunView: UIView!
    @IBOutlet weak var ProjetProfessionnelView: UIView!
    
    @IBOutlet weak var startDateLabel: UILabel!
    @IBOutlet weak var endDateLabel: UILabel!
    
    @IBOutlet weak var ObjCommunButton: UIButton!
    @IBOutlet weak var ObjIndivButton: UIButton!
    @IBOutlet weak var formationButton: UIButton!
    @IBOutlet weak var projetProfessionnelButton: UIButton!
    @IBOutlet weak var fixationButton: UIButton!
    @IBOutlet weak var CompetencesButton: UIButton!
    @IBOutlet weak var CommentaireButton: UIButton!
    
    @IBOutlet weak var inProgressImage: UIImageView!
    @IBOutlet weak var perCentImage: UIImageView!
    
    @IBOutlet weak var registerNumberLabel: UILabel!

    //    MARK:- Button Action
    @IBAction func backButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
        UserDefaults.standard.removeObject(forKey: "codeEvaluation")
    }
    
    
    @IBAction func ObjectifCommunOnclick(_ sender: Any) {
        closeButtonObjCommuns.layer.cornerRadius = 5
        closeButtonObjCommuns.layer.borderColor = UIColor.systemGray3.cgColor
        closeButtonObjCommuns.layer.borderWidth = 1
        blackView.isHidden = false
        objectifsCommunView.isHidden = false
        objectifsCommunView.layer.cornerRadius = 15
    }
    
    @IBAction func closeOnClickObjCommunView(_ sender: Any) {
        objectifsCommunView.isHidden = true
        blackView.isHidden = true
    }
    
    
    @IBAction func closeViewObjectifIndivButton(_ sender: Any) {
        blackView.isHidden = true
        objectifsIndividuelsView.isHidden = true

    }
    @IBAction func ObjectifIndividuelsOnclick(_ sender: Any) {
        blackView.isHidden = false
        objectifsIndividuelsView.isHidden = false
        objectifsIndividuelsView.layer.cornerRadius = 15
        closeButton.layer.cornerRadius = 5
        closeButton.backgroundColor = UIColor.systemGray6
    }
    
    @IBAction func FormationOnclick(_ sender: Any) {
        blackView.isHidden = false
        formationView.isHidden = false
    }
    
    @IBAction func ProjetProfessionnelOnclick(_ sender: Any) {
        blackView.isHidden = false
        ProjetProfessionnelView.isHidden = false
    }
    
    
    @IBAction func FixationOnclick(_ sender: Any) {
        blackView.isHidden = false
        fixationView.isHidden = false
    }
    
    
    @IBAction func CompetencesOnclick(_ sender: Any) {
        blackView.isHidden = false
        competencesView.isHidden = false
    }
    
    
    @IBAction func CommentairesOnclick(_ sender: Any) {
        blackView.isHidden = false
        commentairesView.isHidden = false
        closeButtonCommentaireView.layer.cornerRadius = 10
    }
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    func designingButton(){
        ObjCommunButton.layer.cornerRadius = 10
        ObjIndivButton.layer.cornerRadius = 10
        formationButton.layer.cornerRadius = 10
        projetProfessionnelButton.layer.cornerRadius = 10
        fixationButton.layer.cornerRadius = 10
        CompetencesButton.layer.cornerRadius = 10
        CommentaireButton.layer.cornerRadius = 10
    }
    
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = EvaluationCollaborateurDetailsInteractor()
        let presenter = EvaluationCollaborateurDetailsPresenter()
        let router = EvaluationCollaborateurDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
//    func hiddenViews(){
//        objectifsIndividuelsView.isHidden = true
//        formationView.isHidden = true
//        commentairesView.isHidden = true
//        fixationView.isHidden = true
//        objectifsCommunView.isHidden = true
//        competencesView.isHidden = true
//        ProjetProfessionnelView.isHidden = true
//        blackView.isHidden = true
//    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        designingButton()
//        hiddenViews()
        let userName = UserDefaults.standard.string(forKey: "nameOfUser")!
        let userLastName = UserDefaults.standard.string(forKey: "lastNameOfUser")!
        let typeUser = UserDefaults.standard.string(forKey: "employeType")!
        UserNameLAbel.text = userName + " " + userLastName
        EmployeTypeLabel.text = typeUser
        let token = UserDefaults.standard.string(forKey: "accessToken")!
        let code = UserDefaults.standard.string(forKey: "codeEvaluation")!
//        MARK:- calling interactor to run API :
        self.interactor?.showEvaluationDetails(token: token, code: code)
        self.interactor?.showEvaluationCardsDetails(token: token, code: code)
        NameEvaluator.text = "Evaluateur : "
        registerNumberLabel.text = UserDefaults.standard.string(forKey: "registrationNumber")!
//        tableView.delegate = self
//        tableView.dataSource = self
//        tableView.separatorStyle = .none
//        tableView.reloadData()
    }
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = EvaluationCollaborateurDetails.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: EvaluationCollaborateurDetails.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    var evalDetails : EvaluationDetailsResponse?
    func displayDetails(responses : EvaluationDetailsResponse){
        evalDetails = responses
        NameEvaluator.text = "Evaluateur : " + (evalDetails?.evaluator?.firstName)! + " " + (evalDetails?.evaluator?.lastName)!
        let clearedDateStart = (content?.startDate)!.components(separatedBy: "T")
        let clearedDateEnd = (content?.endDate)!.components(separatedBy: "T")
        print(clearedDateStart,clearedDateEnd)
        print("w")
        startDateLabel.text = clearedDateStart[0]
        endDateLabel.text = clearedDateEnd[0]
        print(evalDetails?.campaignStatus)
        print("www")
        if (evalDetails?.campaignStatus)! == "INP" {
            inProgressImage.image = UIImage(named: "progress")
            perCentImage.image = UIImage(named: "50")
        }else{
            inProgressImage.image = UIImage(named: "done")
            perCentImage.image = UIImage(named: "100")
        }
        print(responses)
    }
    
    func displayCards(responses :[CommunTargetsCard]){
        evaluationCards = responses
//        tableView.reloadData()
    }
    func diplayCardsError(){
        print("no cards !")
    }
    
}


//extension EvaluationCollaborateurDetailsViewController : UITableViewDataSource, UITableViewDelegate{
//    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        return evaluationCards.count
//    }
//
//    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
//        guard let  cellObj = tableView.dequeueReusableCell(withIdentifier: "cellObj", for: indexPath) as?
//            ObjectifCommunTableViewCell
//            else {
//                return UITableViewCell()
//        }
//        print(evaluationCards)
//        print("ewewe")
//        cellObj.labelCard.text = evaluationCards[indexPath.row].label
//        cellObj.descriptionLabel.text = evaluationCards[indexPath.row].communTargetsCardDescription!
//        cellObj.weightLabel.text = String((evaluationCards[indexPath.row].weight)!)
//        cellObj.ValeurCibleLabel.text = "Valeur cible: " + String((evaluationCards[indexPath.row].indicatorsCard![0].targetValue)!)
//        cellObj.remarqueLabel.text = evaluationCards[indexPath.row].indicatorsCard![0].label
//        if String((evaluationCards[indexPath.row].indicatorsCard![0].targetValue)!) == "NA"{
//            cellObj.remarqueLabel.text = "NA"
//        }
//        return cellObj
//    }
//
//
//
//}
